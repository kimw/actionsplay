name: Build and Deploy

env:
  SHADOWSOCKS_RUST_VERSION: 1.15.3
  SHADOWSOCKS_RUST_RELEASE: "1"
  V2RAY_PLUGIN_VERSION: 1.3.1
  V2RAY_PLUGIN_RELEASE: "1"
  GOLANG_VERSION: 1.20.5

on:
  push:
    branches:
      - main

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  prepare-source-code-ss-rust:
    name: "Prepare Source Code: shadowsocks-rust"
    runs-on: ubuntu-latest
    steps:
      - run: cat /etc/os-release
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download source code archive
        run: |-
          tarball_url="https://github.com/shadowsocks/shadowsocks-rust/archive/refs/tags/v${SHADOWSOCKS_RUST_VERSION}.tar.gz"
          tarball_path="shadowsocks-rust-${SHADOWSOCKS_RUST_VERSION}.tar.gz"

          wget --no-verbose "$tarball_url"
          tar -xf "v${SHADOWSOCKS_RUST_VERSION}.tar.gz"
          test -d "shadowsocks-rust-${SHADOWSOCKS_RUST_VERSION}"
          mv -v "shadowsocks-rust-${SHADOWSOCKS_RUST_VERSION}" shadowsocks-rust
      - name: Patching
        run: |-
          for fname in src/*.patch; do
            patch -p1 -i "$fname"
          done
      - run: pwd ; ls -lAF
      - name: Archive prepaired source code
        uses: actions/upload-artifact@v3
        with:
          name: prepaired-source-code
          path: shadowsocks-rust
          if-no-files-found: error

  build-x86_64-gnu-ss-rust:
    name: "Build x86_64 with GNU C: shadowsocks-rust"
    runs-on: ubuntu-latest
    needs: prepare-source-code-ss-rust
    steps:
      - name: Print version info for debugging
        run: |
          cat /etc/os-release &&
          gcc --version &&
          rustup --version &&
          rustup default &&
          rustc --version &&
          cargo --version
      - name: Download prepaired source code
        uses: actions/download-artifact@v3
        with:
          name: prepaired-source-code
      - run: pwd ; ls -lAF
      - name: Install cargo-deb tool
        run: |
          curl -sL https://xdeb.gitlab.io/cargo-deb/cargo-deb_bullseye_amd64.gz | gzip -d > /usr/local/bin/cargo-deb
          chmod 755 /usr/local/bin/cargo-deb
      - name: Build on i686 arch with GNU C library
        run: cargo build --target=x86_64-unknown-linux-gnu --release --features="local-redir,local-dns,local-tun"
      # - run: cargo test --workspace --target=x86_64-unknown-linux-gnu --release
      - name: Package output as .deb
        run: cargo deb --target=x86_64-unknown-linux-gnu --deb-version="${SHADOWSOCKS_RUST_VERSION}-${SHADOWSOCKS_RUST_RELEASE}-xdeb" --output=./dist/
      - name: Pick out binaries
        run: install -Dv -t ./dist/x86_64-gnu/
               ./target/x86_64-unknown-linux-gnu/release/sslocal
               ./target/x86_64-unknown-linux-gnu/release/ssmanager
               ./target/x86_64-unknown-linux-gnu/release/ssserver
               ./target/x86_64-unknown-linux-gnu/release/ssservice
               ./target/x86_64-unknown-linux-gnu/release/ssurl
      - run: ls -lAFR ./dist/
      - name: Archive output
        uses: actions/upload-artifact@v3
        with:
          name: output-x86_64-gnu
          path: dist
          if-no-files-found: error

  build-i686-gnu-ss-rust:
    name: "Build i686 with GNU C: shadowsocks-rust"
    runs-on: ubuntu-latest
    needs: prepare-source-code-ss-rust
    steps:
      - name: Print version info for debugging
        run: |
          cat /etc/os-release &&
          gcc --version &&
          rustup --version &&
          rustup default &&
          rustc --version &&
          cargo --version
      - name: Download prepaired source code
        uses: actions/download-artifact@v3
        with:
          name: prepaired-source-code
      - run: pwd ; ls -lAF
      - name: Install cargo-deb tool
        run: |
          curl -sL https://xdeb.gitlab.io/cargo-deb/cargo-deb_bullseye_amd64.gz | gzip -d > /usr/local/bin/cargo-deb
          chmod 755 /usr/local/bin/cargo-deb
      - name: Install cross compiling dependency
        run: |
          sudo apt-get update
          sudo apt-get install --yes gcc-multilib
      - run: rustup target add i686-unknown-linux-gnu
      - name: Build on i686 arch with GNU C library
        run: cargo build --target=i686-unknown-linux-gnu --release --features="local-redir,local-dns,local-tun"
      # - run: cargo test --workspace --target=i686-unknown-linux-gnu --release
      - name: Package output as .deb
        run: cargo deb --target=i686-unknown-linux-gnu --deb-version="${SHADOWSOCKS_RUST_VERSION}-${SHADOWSOCKS_RUST_RELEASE}-xdeb" --output=./dist/
      - name: Pick out binaries
        run: install -Dv -t ./dist/i686-gnu/
               ./target/i686-unknown-linux-gnu/release/sslocal
               ./target/i686-unknown-linux-gnu/release/ssmanager
               ./target/i686-unknown-linux-gnu/release/ssserver
               ./target/i686-unknown-linux-gnu/release/ssservice
               ./target/i686-unknown-linux-gnu/release/ssurl
      - run: ls -lAFR ./dist/
      - name: Archive output
        uses: actions/upload-artifact@v3
        with:
          name: output-i686-gnu
          path: dist
          if-no-files-found: error
  
  build-v2ray-plugin:
    name: "Build with GNU C: v2ray-plugin (both amd64 & 386)"
    runs-on: ubuntu-latest
    steps:
      - name: "Download Source Archive: v2ray-plugin"
        run: |-
          wget --no-verbose "https://github.com/shadowsocks/v2ray-plugin/archive/refs/tags/v${V2RAY_PLUGIN_VERSION}.tar.gz"
          tar -xf "v${V2RAY_PLUGIN_VERSION}.tar.gz"
      - name: Test
        run: |-
          cd "v2ray-plugin-${V2RAY_PLUGIN_VERSION}"
          go fmt $(go list ./... | grep -v /vendor/) || echo "******** TEST FAILED ********"
          go vet $(go list ./... | grep -v /vendor/) || echo "******** TEST FAILED ********"
          go test -race $(go list ./... | grep -v /vendor/) || echo "******** TEST FAILED ********"
      - name: Build
        run: |-
          ldflags="-s -w"
          ldflags="$ldflags -X 'main.VERSION=v${PKG_VERSION} with v2ray/core $(grep v2ray-core go.mod | sed 's/^.*\s\(.*\)$/\1/'), built @ $(date -u +%FT%TZ)'"
          ldflags="$ldflags -X v2ray.com/core.codename=V2Fly"
          ldflags="$ldflags -X v2ray.com/core.build=$(date -u +%FT%TZ)"

          cd "v2ray-plugin-${V2RAY_PLUGIN_VERSION}"
          GOARCH=amd64 go build -o "../dist/amd64/v2ray-plugin" -ldflags="$ldflags" -trimpath
          GOARCH=386   go build -o "../dist/386/v2ray-plugin"   -ldflags="$ldflags" -trimpath
      - name: Archive output
        uses: actions/upload-artifact@v3
        with:
          name: output-v2ray-plugin
          path: dist
          if-no-files-found: error

  # TODO: package v2ray-plugin .deb

  build-pages:
    name: Build & Deploy GitHub Pages
    runs-on: ubuntu-latest
    needs:
      - build-x86_64-gnu-ss-rust
      - build-i686-gnu-ss-rust
      - build-v2ray-plugin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download building outputs
        uses: actions/download-artifact@v3
        with:
          name: output-x86_64-gnu
      - run: pwd ; ls -lAF
      - name: Download building outputs
        uses: actions/download-artifact@v3
        with:
          name: output-i686-gnu
      - run: pwd ; ls -lAF

      - run: |
          sudo apt-get update
          sudo apt-get install -y gpg reprepro tree

      - name: Import the sign key
        env:
          PRIVATE_SIGKEY: ${{ secrets.PRIVATE_SIGKEY }}
        run: |
          test -n "$PRIVATE_SIGKEY"  # ensure $PRIVATE_SIGKEY is not empty
          echo "${PRIVATE_SIGKEY}" | base64 -d | gpg --import
          gpg -K
      - run: mkdir -p public
      - run: cp -v pubkey.asc pubkey.gpg public/
      - run: ls -lAF
      - name: add .deb files into Debian repository
        run: |-
          reprepro -b debian -C contrib includedeb buster   shadowsocks-rust_${SHADOWSOCKS_RUST_VERSION}-${SHADOWSOCKS_RUST_RELEASE}-xdeb_*.deb
          reprepro -b debian -C contrib includedeb bullseye shadowsocks-rust_${SHADOWSOCKS_RUST_VERSION}-${SHADOWSOCKS_RUST_RELEASE}-xdeb_*.deb
          reprepro -b debian -C contrib includedeb bookworm shadowsocks-rust_${SHADOWSOCKS_RUST_VERSION}-${SHADOWSOCKS_RUST_RELEASE}-xdeb_*.deb
          cp -v -r debian public/
      - name: add .deb files into Ubuntu repository
        run: |
          reprepro -b ubuntu -C universe includedeb focal   shadowsocks-rust_${SHADOWSOCKS_RUST_VERSION}-${SHADOWSOCKS_RUST_RELEASE}-xdeb_*.deb
          reprepro -b ubuntu -C universe includedeb jammy   shadowsocks-rust_${SHADOWSOCKS_RUST_VERSION}-${SHADOWSOCKS_RUST_RELEASE}-xdeb_*.deb
          reprepro -b ubuntu -C universe includedeb kinetic shadowsocks-rust_${SHADOWSOCKS_RUST_VERSION}-${SHADOWSOCKS_RUST_RELEASE}-xdeb_*.deb
          reprepro -b ubuntu -C universe includedeb lunar   shadowsocks-rust_${SHADOWSOCKS_RUST_VERSION}-${SHADOWSOCKS_RUST_RELEASE}-xdeb_*.deb
          cp -v -r ubuntu public/
      - name: Make `index.html`
        run: tree public -H '.' -T "$title" -I "reveal*|img*|style*|index*|content*|data" --noreport --charset utf-8 > public/index.html
      - name: Archive output
        uses: actions/upload-artifact@v3
        with:
          name: output-build-pages
          path: public
          if-no-files-found: error

  test-pages:
    name: Test deb repo
    needs: build-pages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifact from build-pages
        uses: actions/download-artifact@v3
        with:
          name: output-build-pages
          path: public
      - run: ls -lAFR
      - name: Set up deb repo container
        run: docker run --name test-deb-repo -d -t --net test -v $(pwd)/public:/usr/share/nginx/html:ro nginx:alpine
      - run: docker exec -t test-deb-repo ls -lAF /usr/share/nginx/html
      - name: Test to install .deb on Debian OSes
        run: |-
          for codename in buster bullseye bookworm
          do
            docker run --name test-${codename} -d -t --net test \
              -e DEBIAN_FRONTEND=noninteractive \
              -v $(pwd)/test/${codename}-sources.list:/etc/apt/sources.list.d/xdeb.list:ro \
              -v $(pwd)/pubkey.gpg:/etc/apt/trusted.gpg.d/xdeb.gpg:ro \
              debian:${codename}
            ls -lAF /etc/apt /etc/apt/trusted.gpg.d /etc/apt/sources.list.d
            docker exec test-${codename} apt-get update
            docker exec test-${codename} apt-get install -y shadowsocks-rust
            docker exec test-${codename} sslocal --version
            docker exec test-${codename} ssmanager --version
            docker exec test-${codename} ssserver --version
            docker exec test-${codename} ssservice --version
            docker exec test-${codename} ssurl --version
            docker rm -f test-${codename}
          done
      - name: Test to install .deb on Ubuntu OSes
        run: |-
          for codename in focal jammy kinetic lunar
          do
            docker run --name test-${codename} -d -t --net test \
              -e DEBIAN_FRONTEND=noninteractive \
              -v $(pwd)/test/${codename}-sources.list:/etc/apt/sources.list.d/xdeb.list:ro \
              -v $(pwd)/pubkey.gpg:/etc/apt/trusted.gpg.d/xdeb.gpg:ro \
              ubuntu:${codename}
            docker exec -t test-${codename} apt-get update
            docker exec -t test-${codename} apt-get install -y shadowsocks-rust
            docker exec -t test-${codename} sslocal --version
            docker exec -t test-${codename} ssmanager --version
            docker exec -t test-${codename} ssserver --version
            docker exec -t test-${codename} ssservice --version
            docker exec -t test-${codename} ssurl --version
            docker rm -f test-${codename}
          done
      - name: Destroy deb repo container
        run: docker rm -f test-dev-repo

  deploy-pages:
    name: Deploy GitHub Pages
    needs:
      - build-pages
      - test-pages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout build-pages artifact
        uses: actions/download-artifact@v3
        with:
          name: output-pages
          path: public
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: public
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2

  # TODO: v2ray-plugin
